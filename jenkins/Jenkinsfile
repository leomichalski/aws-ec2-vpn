pipeline {
    agent any

    stages("Rent and configure VPN server.") {
        stage("Checkout source code.") {
            steps {
                git url: "https://www.github.com/leomichalski/aws-ec2-vpn.git", branch: "main"
            }
        }

        stage("Initialize Terraform.") {
            environment {
                AWS_ACCESS_KEY_ID = credentials("AWS_ACCESS_KEY_ID")
                AWS_SECRET_ACCESS_KEY = credentials("AWS_SECRET_ACCESS_KEY")

                S3_BACKEND_BUCKET = credentials("S3_BACKEND_BUCKET")
                S3_BACKEND_KEY_PATH = credentials("S3_BACKEND_KEY_PATH")
                REGION = credentials("REGION")
                ENCRYPT = credentials("ENCRYPT")
                S3_BACKEND_DYNAMODB_TABLE = credentials("S3_BACKEND_DYNAMODB_TABLE")

            }
            steps {
                script {
                    dir("infrastructure") {
                        sh '''#!/bin/bash
                            terraform init -backend-config="bucket=${S3_BACKEND_BUCKET}" \
                                           -backend-config="key=${S3_BACKEND_KEY_PATH}" \
                                           -backend-config="region=${REGION}" \
                                           -backend-config="encrypt=${ENCRYPT}" \
                                           -backend-config="dynamodb_table=${S3_BACKEND_DYNAMODB_TABLE}"
                        '''
                    }
                }
            }
        }

        stage("Rent the VPN server.") {
            environment {
                AWS_ACCESS_KEY_ID = credentials("AWS_ACCESS_KEY_ID")
                AWS_SECRET_ACCESS_KEY = credentials("AWS_SECRET_ACCESS_KEY")

                TF_VAR_default_ssh_key_name = credentials("SSH_KEY_NAME")
                TF_VAR_default_ssh_public_key = credentials("SSH_PUBLIC_KEY")

                TF_VAR_region = credentials("REGION")
                TF_VAR_availability_zone = credentials("AVAILABILITY_ZONE")
                TF_VAR_project_tag = "my-vpn-tag"
            }
            steps {
                script {
                    dir("infrastructure") {
                        sh '''#!/bin/bash
                            terraform apply --auto-approve
                        '''

                        // Make the external IP available for the next stage(s)
                        env.EXTERNAL_IP=sh(script:'cat instance_public_ip.txt', returnStdout: true).trim()

                        sh '''#!/bin/bash
                            rm instance_public_ip.txt

                            mkdir -p ~/.ssh

                            # Only the jenkins user can read/write to "~/.ssh/known_hosts"
                            touch ~/.ssh/known_hosts
                            chmod 0600 ~/.ssh/known_hosts

                            # Only update "jenkins" user "known_hosts" file if the EC2 instance IP changed
                            ssh-keygen -F ${EXTERNAL_IP} > /dev/null 2>&1
                            if [ $? -eq 0 ]; then
                                echo "Host is already known"
                            else
                                echo "Updating known hosts"
                                ssh-keyscan -t rsa ${EXTERNAL_IP} | tee -a ~/.ssh/known_hosts > /dev/null 2>&1
                            fi
                        '''
                    }
                }
            }
        }

        stage("Configure the VPN server.") {
            environment {
                SSH_PRIVATE_KEY_PATH = credentials("SSH_PRIVATE_KEY_PATH")
                ADDRESS = "10.8.0.1/24"
                LISTEN_PORT = "51820"
            }
            steps {
                script {
                    dir("installation") {
                        sh '''#!/bin/bash
                            # Only the user that created "inventory.ini" can read/write to it
                            touch inventory.ini
                            chmod 0600 inventory.ini

                            # Fill the "inventory.ini" file
                            echo "\
                            [vpnserver]
                            ${EXTERNAL_IP} ansible_ssh_private_key_file=${SSH_PRIVATE_KEY_PATH} address=${ADDRESS} listen_port=${LISTEN_PORT}
                            " | awk '{$1=$1};1' | tee inventory.ini > /dev/null 2>&1

                            # Install the VPN
                            ansible-playbook -i inventory.ini configure_server.yml

                            rm inventory.ini
                        '''
                    }
                }
            }
        }
    }
}
